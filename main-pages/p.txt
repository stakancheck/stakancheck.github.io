ОЛИМПИАДА ШКОЛЬНИКОВ «ШАГ В БУДУЩЕЕ»
ПО ПРОФИЛЮ «ИНЖЕНЕРНОЕ ДЕЛО»








                регистрационный номер



Секция: _____________________________________________________________________
название секции



_________________________________________________________________________________________________________________________________________________________________________________________________________
название работы



Автор: 						_____________________________________
фамилия, имя, отчество
	_____________________________________
наименование учебного заведения, класс


Научный руководитель: 			_____________________________________
фамилия, имя, отчество
_____________________________________
место работы
_____________________________________
звание, должность

____________________________________________
 подпись научного руководителя


 
АННОТАЦИЯ

СОДЕРЖАНИЕ	
Теоретическая часть	7
1. Функционал приложения	7
1.1 Окна приложения	7
1.2 Система отправки и получения информации	9
2. Общие принципы взаимодействия приложения и сервера	9
3. Структура запросов к API сервера	11
4. Архитектура мобильного приложения	13
5. Архитектура серверной части	16
Практическая часть	18
6. Разработка Android приложения	18
6.1 Инструменты для разработки Android приложения	18
6.2 Реализация DATA слоя приложения	19
6.3 Реализация PRESENTATION слоя приложения	21
6.4 Верстка графического интерфейса	25
6.5 Dependency Injection (внедрение зависимостей)	27
6.6 Работа с фоновыми процессами	28
7. Подготовка приложения и сборка Android проекта	29
Заключение	31
Список использованных источников	32
ПРИЛОЖЕНИЕ А	33
ПРИЛОЖЕНИЕ Б	34
ПРИЛОЖЕНИЕ В	35
ПРИЛОЖЕНИЕ Г	36
ПРИЛОЖЕНИЕ Д	37
ПРИЛОЖЕНИЕ Е	38
ВВЕДЕНИЕ
Недвижимость является одной из самых значимых и дорогостоящих инвестиций в жизни людей. Поэтому очень важно тщательно проверить все документы и договора, связанные с покупкой жилья, а также саму квартиру перед покупкой.
По данным Росстата, обнародованным 11 февраля 2022 года, в 2021 году ведомство зарегистрировало 898,6 тыс. договоров долевого участия (ДДУ) в строительстве жилья, что на 17% больше, чем годом ранее, когда количество сделок измерялось 763,8 тыс.
Руководитель аппарата Национального объединения застройщиков жилья Кирилл Холопик, комментируя статистику Росстата, отметил, что продажи новостроек в России в 2021 году обновили рекорд, который держался с 2014 года.
Несмотря на то, что новостройки предлагают свежий и современный вид недвижимости, многие из них имеют недостатки и дефекты, которые могут оказаться критическими. Некоторые из них не связаны с отделкой, а являются проблемами конструктивного характера, например, неправильное расположение стен, недостаточная шумоизоляция или плохое качество монтажа коммуникаций.
Чтобы избежать неприятных ситуаций, связанных с покупкой бракованного жилья, необходимо проявлять бдительность и внимательность на всех этапах сделки. Важно выбрать надежного застройщика, провести тщательную проверку документов и подробно ознакомиться с договором, прежде чем подписывать его. Также рекомендуется провести осмотр квартиры с профессиональным оценщиком, чтобы избежать проблем, связанных с качеством строительства и отделки.
Если при приемке жилья собственник обнаруживает нарушения или дефекты, он может обратиться к застройщику с запросом на устранение проблемы. Если же застройщик не реагирует на запросы, собственник в праве обратиться в Роспотребнадзор или судебные органы, чтобы защитить свои права как потребителя.
В марте 2022 года было принято постановление в рамках пакета антикризисных мер, которое регулирует взаимодействие застройщиков и участников долевого строительства при передаче недвижимости. Согласно новому механизму, дольщик имеет приоритетное право на обращение по поводу недостатков в новостройке, которую ему сдают. В случае возникновения разногласий между застройщиком и дольщиком по качеству объекта, для решения спора может быть привлечен эксперт для проведения обследования.
Эксперты в недвижимости отмечают увеличение числа обращений дольщиков в судебные органы в случае несвоевременного и недобросовестного устранения нарушений в новостройках. За второй квартал 2022 года число обращений по проведению строительной до судебной экспертизы увеличилось на 45% по сравнению с 2021 годом, сообщает ТАСС со ссылкой на данные компании "Этажи" Герасимов.
Компания "Ситипроф" также отмечает ежегодный прирост обращений на 25%, что, по их мнению, связано с увеличением популярности услуги среди дольщиков. Они начали объединяться в чатах и сообществах, передавать друг другу контакты приемщиков. Также влияет развитие дополнительных услуг, которые можно сделать во время осмотра, например, оценка для банка при ипотеке, проверка площади и использование тепловизора зимой.
Таким образом большими темпами развивается рынок специальных компаний, занимающихся строительной экспертизой. Они предоставляют свои услуги по оценке качества нового жилья, а также помогают в составлении исков и ведении судебных процессов. Большинство таких контор сосредоточено в крупных городах РФ. Вследствие этого появляется конкуренция, разные организации для увеличения потока разрабатывают уникальные решения, улучшают сервис. Порядок работы с клиентами у всех компаний очень схож:
1. Обращение и запись на осмотр, согласование даты
2. Осмотр квартиры, выявление дефектов экспертом
3. Составление дефектной ведомости
4. Подписание акта приема передачи
Как правило, дефектная ведомость заполняется экспертом на специальных бланках, а фотографии распечатываются и прикладываются отдельно. Некоторые компании сообщают о неисправностях в устном виде при выборе самого дешевого тарифа. Все это происходит, потому что составление подробного отчета в электронном виде является дорогим и непрактичным решением.
Сейчас практически нет специально разработанных открытых сервисов для составления подобных актов. Во время осмотра квартиры заметки делаются в блокнотах письменно либо в телефоне, а конечный отчет составляется в офисе на компьютере с прикреплением фотографий. Эта процедура добавляет лишний час работы в офисе для каждого выезда на осмотр. Также на местах новостроек часто отсутствует Интернет, поэтому нет возможности записывать информацию, используя онлайн-сервис. Заполнение электронных таблиц на смартфоне неудобно и требует большого количества времени и подготовки.
Поэтому одной из подобных компании, занимающейся строительной экспертизой жилых помещений, нам было предложено разработать специальный сервис для внутреннего использования, который бы закрывал потребности в быстром и удобном заполнении отчетов во время осмотра квартиры специалистами. Поэтому нашей целью нашего проекта стала разработка такого специального мобильного приложения. Программа должна уметь отправлять отчеты на сервер при появлении сети, так как на недостроенных объектах часто нет Интернета. Уже на сервере будет автоматически генерироваться отчет в электронном формате, сохранятся в облако и отсылаться на почту клиентам. В данной проектной работе будет более подробно рассмотрена часть связанная непосредственно с разработкой мобильного приложения.
Цель проекта: разработка мобильного приложения для составления актов приемки и экспертизы жилья для операционной системы Android с возможностью работы без Интернета, а также создание специального REST API сервера с панелью администратора.
Задачи проекта:
1.	Разработать архитектуру мобильного приложения и сервера.
2.	Подготовить структуру для запросов к API.
3.	Написать программный код мобильного приложения для Android.
4.	Разработать REST API для серверной части и панель администратора.
5.	Подготовить приложение к сборке и использованию.
ТЕОРЕТИЧЕСКАЯ ЧАСТЬ
1. Функционал приложения
1.1 Окна приложения
Регистрация пользователя. (Приложение А, Картинка 1) Пользователь может проходить регистрацию прямо из приложения. Необходимо ввести минимальный список данных сотрудника предприятия, среди которых: логин, электронная почта, номер телефона, имя, фамилия, пароль с дублированием. После успешного прохождения регистрации пользователю будет доступен остальной функционал (ранее кнопки на навигационной панели заблокированы).
Авторизация пользователя. (Приложение А, Картинка 2) Для авторизации в приложении необходимо ввести данные логина и пароля. С окна входа можно перейти в раздел регистрации, если аккаунт не был создан ранее.
Страница пользователя.  (Приложение А, Картинка 3) На главной странице можно увидеть имя, фамилию, логин, электронную почту и номер телефона. Данные электронной почты, номера телефона и пароля можно изменить. При вызове соответствующего пункта открывается диалог с полями ввода и подтверждением. Также на этом экране доступна функция просмотра специального ключа сессии, который можно скопировать, нажав кнопку в появившемся диалоге. Выход из аккаунта сопровождается диалогом подтверждения.
Главное окно редактора. (Приложение Б, Картинка 1) На главном окне редактора расположены две карточки обозначающие тип желаемого отчета: «Приемка» и «Экспертиза». При нажатии на карточку начинается редактирование, и пользователь переходит на раздел заполнения. Если же какой-то акт уже находится в стадии редактирования, то на соответствующей карточке появляется обозначение, а при нажатии на другую появляется диалог с подтверждением смены типа и потери заполненных данных (Приложение Б, Картинка 2).
Начальный раздел редактора. (Приложение Б, Картинка 3) Раздел встречает обязательными полями ввода объекта, адреса, собственника и электронного адреса для отправки акта на почту клиента. Из этого раздела можно завершить редактирование или удалить сохранение с диалогом подтверждения. Все поля обладают проверкой, а адрес электронной почты проходит начальную валидацию, в случае ошибки в соответствующем поле появляется сообщение.
Редактор. В редакторе трехуровневая иерархия. На первом уровне мы можем вобрать помещение (Приложение В, Картинка 1), а на следующем конкретный объект (Приложение В, Картинка 2). У объекта отображаются возможные замечания (Приложение В, Картинка 3). Каждое замечание можно отметить, тогда оно поменяет статус и будет активно, отобразится поле ввода комментария и кнопка добавления фото со счетчиком прикрепленных фотографий. У замечаний можно вызвать диалог с просмотром конкретного ГОСТа, если такой имеется (Приложение Д, Картинка 1).
Диалог выбора фото. Диалог добавления фото появляется из нижней части экрана (Приложение Г, Картинка 1). В центре расположен видоискатель квадратной формы и кнопка затвора камеры. Также есть возможность выбрать несколько фотографий прямо из галереи телефона. Прикрепленные фотографии отображаются горизонтальным списком над видоискателем и могут быть удалены по нажатию на кнопку с крестом (Приложение Г, Картинка 2).
Подтверждение завершения. (Приложение Г, Картинка 3) После завершения редактирования пользователю предложено еще раз просмотреть введенные данные. В списке видны отдельные объекты и отмеченные замечания. В нижней части экрана есть слайдер настройки качества фотографии (уровня сжатия перед отправкой) и кнопки отмены и сохранения.
Просмотр актов. (Приложение Д, Картинка 2) В разделе актов можно увидеть информацию о сохраненных на устройстве отчетах, которые еще не были отправлены на сервер. Для каждого отчета появляется карточка с временем сохранения и типом, при нажатии на которую выходит диалог с информацией об отчете (Приложение Д, Картинка 3). Кнопка отправки вручную позволяет сделать попытку отправки.
1.2 Система отправки и получения информации
Получение структуры отчета. Каждый раз при входе в приложение программа проверяет наличие Интернета и пытается загрузить актуальную шаблона приемки и экспертизы. Шаблон представляет собой список помещений, объектов и возможных замечаний для каждого. Редактировать этот шаблон можно из панели администратора на сайте сервера.
Отправка актов. Редактировать акт можно без подключения к Интернету. После сохранения отчета, он попадает в очередь на отправку и будет отправлен, как только появится доступ в сеть. Акты должны отправляться автоматически независимо от того работает ли приложение или заблокировано ли устройство. При неудачной отправке необходимо настроить автоматический повтор через некоторое время.
2. Общие принципы взаимодействия приложения и сервера
Общий принцип взаимодействия (Рисунок 1) частей проекта заключается в том, чтобы мобильное приложение и сервер могли обмениваться данными и информацией, которые хранятся в разных местах. Для этого используются различные протоколы и технологии, такие как REST API, Retrofit, DataStore, PostgreSQL и Яндекс.Диск.
Принципы взаимодействия:
1.	Мобильное приложение на Kotlin с помощью Retrofit отправляет HTTP-запросы к Django REST API серверу.
2.	Сервер на Django REST API обрабатывает запросы и использует PostgreSQL базу данных для хранения и извлечения данных.
3.	Обработанные данные сохраняются на Яндекс.Диске.
4.	Приложение на Kotlin использует DataStore для хранения промежуточных временных данных и информации о пользователе.
Этот метод используется потому, что он обеспечивает эффективное взаимодействие между мобильным приложением и сервером, а также позволяет организовать удобное хранение и извлечение данных в базе данных PostgreSQL и на облачном храннилище Яндекс.Диск. Кроме того, использование Retrofit и Django REST API позволяет упростить взаимодействие между мобильным приложением и сервером, т.к. эти технологии обеспечивают простой и удобный способ передачи данных между двумя системами. В итоге, такой подход повышает качество и производительность приложения. Для разработки подобных приложений часто используют похожую схему взаимодействия.
Для более глубокого понимания принципов взаимодействия частей проекта, можно рассмотреть каждую технологию отдельно:
Retrofit: это библиотека для Android, которая упрощает процесс создания сетевых запросов и обработки ответов. Retrofit использует аннотации для описания запросов и типов данных, что делает код более читаемым и понятным. Она также обеспечивает возможность асинхронной обработки запросов и поддерживает различные форматы данных, такие как JSON, XML и другие.
Django REST API: это фреймворк для разработки веб-приложений на языке Python, который позволяет создавать RESTful API. Он предоставляет инструменты для описания моделей данных, сериализации и десериализации данных, аутентификации и авторизации пользователей, обработки ошибок и т.д. Вместе с Retrofit он обеспечивает эффективное взаимодействие между клиентом и сервером.
PostgreSQL: это реляционная база данных с открытым исходным кодом, которая предоставляет множество функций для хранения и извлечения данных. Она обеспечивает высокую производительность и надежность, поддерживает транзакции, сжатие данных, репликацию и другие возможности.
DataStore: это библиотека для хранения данных на устройствах Android. Она предоставляет удобный API для сохранения и извлечения данных, поддерживает асинхронную обработку запросов и автоматически обрабатывает изменения данных, что упрощает разработку приложений.
Яндекс.Диск: это облачное хранилище данных, которое позволяет сохранять и синхронизировать файлы между устройствами. Оно предоставляет API для доступа к файлам, обеспечивает высокую надежность и безопасность хранения данных.
3. Структура запросов к API сервера
Перед разработкой основных частей проекта необходимо определиться с правилами обмена информацией. Это позволяет сделать заранее хорошо построенная структура запросов к API серверной части. Правильная структура REST API запросов должна соответствовать следующим принципам:
Использование HTTP методов: REST API должен использовать HTTP методы для описания операций, которые необходимо выполнить с ресурсами. Например, GET используется для получения ресурса, POST используется для создания нового ресурса, PUT используется для обновления существующего ресурса, а DELETE используется для удаления ресурса. Django REST framework использует HTTP методы, чтобы определить тип операции, которую нужно выполнить с ресурсом.
Использование URI: URI должен использоваться для идентификации ресурсов, с которыми работает REST API. URI должен быть читаемым и описательным, что позволит пользователям понимать, какие ресурсы доступны и как их использовать. Django REST framework использует URI для идентификации ресурсов. URI для каждого ресурса описывается в URL маршрутах.
Использование JSON: REST API должен использовать формат JSON для представления данных. JSON является легковесным и читаемым форматом, который легко сериализуется и десериализуется на разных языках программирования. Django REST framework использует формат JSON для представления данных. Он позволяет сериализовать и десериализовать данные на разных языках программирования.
Использование версионирования: REST API должен быть версионирован, чтобы обеспечить совместимость между различными версиями API и позволить пользователям понимать, какая версия используется в данный момент.
Обеспечение безопасности: REST API должен обеспечивать безопасность передаваемых данных, аутентификацию и авторизацию пользователей, ограничение доступа к определенным ресурсам и т.д. Django REST framework предоставляет инструменты для обеспечения безопасности, такие как аутентификация и авторизация, ограничение доступа к ресурсам и т.д.
Использование кэширования: REST API должен использовать кэширование, чтобы уменьшить нагрузку на сервер и ускорить ответы на запросы. Django REST framework имеет встроенную поддержку кэширования и удобные инструменты для её настройки.
Обеспечение гибкости: REST API должен быть гибким и расширяемым, чтобы позволить добавлять новые функции и изменять существующие без изменения интерфейса.
Документирование: REST API должен быть документирован, чтобы позволить пользователям понимать, какие ресурсы доступны и как их использовать. Документация должна быть четкой, понятной и поддерживаться в актуальном состоянии. Django REST framework имеет встроенный инструмент для создания документации API.
Таким образом, Django REST framework реализует большинство из правильных структурных принципов REST API запросов.
4. Архитектура мобильного приложения
Архитектура мобильного приложения — это общая концепция и структура приложения, которые определяют, как его различные компоненты взаимодействуют друг с другом и как данные обрабатываются в приложении. Архитектура приложения является одним из ключевых аспектов, определяющих его эффективность, масштабируемость и удобство использования.
Архитектура мобильного приложения необходима для того, чтобы обеспечить простоту и надежность разработки, обеспечить легкость сопровождения и расширения приложения, а также улучшить пользовательский опыт.
Clean Architecture (чистая архитектура) — это методология разработки программного обеспечения, предложенная Робертом Мартином (также известным как Uncle Bob). Принципы Clean Architecture заключаются в создании приложения с разделением на уровни, где каждый уровень имеет свою специфическую задачу и ответственность. Эти уровни строятся на основе принципов SOLID и DRY.
Принципы Clean Architecture включают в себя:
1.	Independency - уровни архитектуры не должны зависеть от внешних фреймворков, баз данных или библиотек.
2.	Testability - приложение должно быть построено таким образом, чтобы его было легко тестировать.
3.	Maintainability - архитектура должна обеспечивать легкость сопровождения и обновления приложения.
4.	Scalability - приложение должно быть построено таким образом, чтобы его можно было легко масштабировать.
Основная идея Clean Architecture заключается в том, чтобы разделять приложение на слои, которые отвечают за свою конкретную задачу. Наиболее важным слоем является бизнес-логика приложения, которая должна быть максимально независимой от других уровней. Для этого используются интерфейсы и абстракции.
В рамках Clean Architecture приложение строится в виде "кольца", где внешние слои могут вызывать внутренние слои, но обратное невозможно. Это обеспечивает независимость и гибкость системы.
Основные преимущества использования Clean Architecture заключаются в том, что это позволяет создавать гибкие, модульные и расширяемые приложения, которые легко поддерживать и тестировать. Кроме того, это обеспечивает масштабируемость приложения и повышает его безопасность.
В целом, использование принципов Clean Architecture позволяет создавать качественное, надежное и гибкое приложение, которое может легко развиваться и адаптироваться к новым требованиям.
В официальной документации от Google описаны некоторые основные принципы построения архитектуры мобильных приложений (Рисунок 2), они соблюдают большинство популярных существующих шаблонов и подходов в программировании больших продуктов.
1.	UI Layer: уровень пользовательского интерфейса (или уровень представления) играет важную роль в процессе отображения данных приложения на экране. Каждый раз, когда происходят изменения в данных, вызванные либо пользовательским взаимодействием (например, нажатие кнопки), либо внешним вводом (например, ответ сети), пользовательский интерфейс должен обновиться, чтобы отобразить эти изменения.
2.	Domain Layer: уровень предметной области является необязательным слоем, который находится между пользовательским интерфейсом и слоями данных. Этот уровень отвечает за инкапсуляцию сложной бизнес-логики или простой бизнес-логики, которая может быть повторно использована несколькими ViewModels. Этот слой не является обязательным, поскольку не все приложения будут требовать такой функциональности. 
3.	Data Layer: уровень данных приложения содержит бизнес-логику. Бизнес-логика определяет ценность приложения и состоит из правил, которые определяют, как приложение создает, хранит и изменяет данные.
Следуя общепринятым принципам, мы проработали архитектуру приложения, которая соответствует рекомендациям Google. Мы включили в проекте разделение на слои бизнес-логики и графического представления. В дальнейшем они будут называться Presentation слой и Data слой соответственно. Мы исключили дополнительное выделение Domain слоя, так как проект не нуждается в сложных преобразованиях данных на моменте передачи из слоя данных в презентационный.
5. Архитектура серверной части
Стандартная архитектура Django REST Framework приложения включает следующие компоненты:
1.	Модели данных: модели Django, которые определяют, какие данные будут храниться в базе данных приложения.
2.	Сериализаторы: классы, которые преобразуют модели данных в форматы. Именно эти форматы дальше могут быть использованы в API (например, JSON).
3.	Представления (Views): классы, которые определяют, как данные будут представлены в API. Они принимают запросы от клиентов и возвращают ответы в соответствии с требованиями API.
4.	Маршруты (Urls): определяют, какие URL-адреса будут обрабатываться какими представлениями.
5.	Аутентификация и авторизация: Django REST Framework предоставляет готовые средства для аутентификации и авторизации пользователей API.
6.	Пагинация: Django REST Framework предоставляет готовые средства для пагинации данных API.
7.	Фильтрация и сортировка: Django REST Framework предоставляет готовые средства для фильтрации и сортировки данных API.
8.	Рендереры (Renderers): классы, которые определяют форматы ответов API (например, JSON или XML).
9.	Обработчики исключений (Exception Handlers): классы, которые определяют, как обрабатывать ошибки в API.
Все эти компоненты взаимодействуют между собой для создания гибкого, масштабируемого и безопасного REST API приложения.
Разработанный REST API имеет простой принцип работы (Рисунок 3): полученный запрос распознается через URL шаблоны, обрабатывается, входные данные проходят десереализацию и происходит логика чтения или записи базы данных.

ПРАКТИЧЕСКАЯ ЧАСТЬ
6. Разработка Android приложения
6.1 Инструменты для разработки Android приложения
Android Studio. Основным инструментом разработки является программа Android Studio. Android Studio - это интегрированная среда разработки (IDE) для создания мобильных приложений для операционной системы Android. Она предоставляет инструменты для разработки, отладки и тестирования приложений, а также интегрированные средства для работы с базами данных, версионным контролем и другими инструментами разработки. Отдельно хочется отметить то, что использование этого сервиса позволяет легко и быстро осуществлять настройку сборки Gradle и управлять зависимостями.
Мы бы могли использовать другие среды разработки, например, Eclipse или IntelliJ IDEA, но выбрали Android Studio по ряду причин:
1.	Он официально поддерживается Google, компанией, которая разработала Android, что гарантирует его соответствие стандартам и лучшую интеграцию с другими инструментами и сервисами Google.
2.	Android Studio имеет множество интегрированных инструментов для разработки приложений, таких как визуальный редактор макетов, инструменты для отладки, профилирования и тестирования приложений, что упрощает и ускоряет процесс разработки.
3.	Он имеет большое сообщество разработчиков и множество документации и учебных ресурсов, что помогает быстрее учиться и решать проблемы.
4.	Android Studio поддерживает широкий набор языков программирования, таких как Java, Kotlin и C++, что дает возможность выбрать язык в зависимости от задачи и опыта разработчика.
5.	В этой среде удобно работать с макетами графического интерфейса, он позволяет в реальном времени видеть, как будет выглядеть то или иное окно приложения.
В целом, использование Android Studio позволяет ускорить и упростить процесс разработки мобильных приложений для Android, благодаря множеству интегрированных инструментов. Я использую для работы версию приложения из канала раннего доступа (Canary), так как на момент 4 мая 2023 года только в ранней версии программы доступен новый графический интерфейс.
Figma.  Мы использовали онлайн-сервис Figma для создания макетов некоторых экранов. Figma является одним из наиболее популярных инструментов для дизайна интерфейсов в IT-индустрии. Он предлагает ряд преимуществ, таких как онлайн совместная работа, возможность работать с файлами на любых устройствах и операционных системах, а также высокую степень масштабируемости и настраиваемости. Это позволяет создавать высококачественные дизайн-проекты любой сложности и подходить к процессу дизайна более гибко и эффективно.
Excalidraw. Также при работе над проектом часто появлялась необходимость делать заметки и быстро рисовать концепты графического интерфейса, простые диаграммы взаимосвязей частей приложения. Для решения этой задачи мы использовали бесплатный онлайн-сервис Excalidraw.
6.2 Реализация DATA слоя приложения
Данный слой приложения представлен в отдельном пакете data. Он содержит всю логику записи, чтения и изменения данных. Слой реализует алгоритмы хранения данных в локальной памяти устройства, а также отправки данных на сервер. Дальше будет разобраны части пакета (Рисунок 4).
API.  Данный пакет описывает взаимодействие между мобильным приложением и сервером. Он содержит интерфейс NetworkService, который задает константы с адресом сервера и путями для запросов. Для отправки и получения данных используются библиотеки retrofit2 и okhttp3. Каждый запрос представляет собой метод с необходимыми аннотациями библиотеки запросов. Входные и выходные данные определены в виде data-классов, а ответы от сервера десериализуются в эти классы. Основное преимущество retrofit2 заключается в том, что он автоматически выполняет процесс сериализации и десериализации данных, что упрощает работу с сетью и уменьшает количество кода, необходимого для реализации запросов. Кроме того, retrofit2 позволяет управлять таймаутами, подключением, кэшированием и другими аспектами работы с сетью.
INTERNAL_STORAGE. Данный пакет представляет собой модуль, который позволяет осуществлять чтение и запись файлов в локальное хранилище устройства. Для этих целей используется application internal storage - выделенное место для хранения постоянных файлов и кешированных данных, к которому доступ имеет только само приложение. В нашем проекте мы используем этот модуль для сохранения фотографий, сделанных пользователем во время заполнения акта. Все операции чтения и записи файлов производятся стандартными средствами модуля io Java. Для оптимизации использования места на устройстве и повышения скорости отправки данных на сервер, перед сохранением фотографий они сжимаются с помощью библиотеки Bitmap. Этот модуль обеспечивает безопасность данных, поскольку на Android 10 и выше эти местоположения зашифрованы и доступны только для приложения, что делает его надежным местом для хранения конфиденциальных данных.
REPOSITORY. Пакет содержит единственный класс, который реализует интерфейс Repository из презентационного слоя приложения. Он отвечает за обработку запросов на сохранение и чтение данных в разных разделах памяти. Именно через экземпляр этого класса мы получаем доступ к данным изнутри презентационного слоя приложения. Большинство представленных методов являются функциями реактивного потока для возможности асинхронного вызова. А возвращают они наблюдаемые потоки, содержащие реализацию класса Result. Этот класс написан вручную и используется для удобной обработки ошибок. Также внутри класса RepositoryImpl реализована логика работы с DataStore. Это специальная библиотека для асинхронного чтения и записи параметров приложения. Именно в это место приложение сохраняет временные данные акта, а также всю информацию о пользователе и шаблонах актов.
MODELS. В данном модуле представлены пакеты local, requests и responses. Каждый из них содержит некоторый перечень data-классов, которые используются для хранения данных в локальной памяти устройства, отправки данных на сервер и принятия ответов от сервера соответственно. Использование data-классов упрощает сериализацию и десериализацию данных. Благодаря специальным аннотациям библиотеки Gson мы можем помечать желаемые имена полей и необходимость их сохранения.
6.3 Реализация PRESENTATION слоя приложения
Для реализации интерфейса приложения было принято использовать Single Activity  шаблон. Single Activity - это подход в разработке мобильных приложений, который заключается в том, чтобы иметь только одну Activity (окно приложения) и использовать фрагменты для отображения различных экранов внутри этой Activity.
Основным преимуществом использования Single Activity подхода является более эффективное использование ресурсов устройства и уменьшение нагрузки на систему. Это достигается благодаря тому, что каждый новый экран не создает новую Activity, а только загружает фрагмент в существующей Activity. Это позволяет уменьшить время загрузки и потребление оперативной памяти устройства, что повышает производительность приложения и улучшает пользовательский опыт.
Single Activity подход также позволяет более гибко управлять навигацией в приложении и проще поддерживать его код. Все экраны приложения находятся в одном месте, что упрощает их переиспользование и модификацию. Так как приложение должно поддерживать работу большого количества окон и диалогов, данный подход является более эффективным способом реализации структуры данного слоя.
Презентационный слой приложения включает в себя несколько пакетов (Рисунок 5). Далее следует более подробное описание каждого.
APP. Данный пакет отвечает за реализацию основного класса приложения. Его явное объявление необходимо для создания конфигурации WorkManager (подробнее, о котором будет рассказано в пункте 6.5).
BASE. Данный пакет содержит открытый для наследования класс BaseFragment.  Он используется для более удобного создания фрагментов интерфейса, так как он реализует в себе логику подключения view binding. View Binding - это механизм, который позволяет получить привязку к View (виджетам) в разметке XML во время выполнения. Это означает, что мы можем получить ссылки на виджеты в коде без необходимости выполнять findViewById().
Использование View Binding упрощает процесс работы с виджетами в коде и снижает вероятность ошибок. Это также повышает производительность приложения, так как нет необходимости выполнять поиск View в дереве иерархии каждый раз при обращении к ним в коде. Кроме того, использование View Binding позволяет избежать проблем с памятью, связанными с частым вызовом findViewById().
REPOSITORY. Данный пакет содержит один интерфейс, который описывает методы получения данных из DATA слоя приложения. Именно этот интерфейс реализует RepositoryImpl в слое работы с данными. Такой подход позволяет разделить зону ответственности разработчиков части бизнес-логики и интерфейса.
MAIN_ACTIVITY.  В данном пакете представлена реализация главного и единственного класса Activity приложения согласно шаблону Single Activity. Здесь задается логика работы навигационной панели приложения, так как она находится на этом слое.
FEATURES.  Это объединенное название нескольких пакетов: редактор акта, представление актов и пользователь. Каждый пакет содержит определенное кол-во независимых модулей, каждый из которых отвечает за реализацию отдельного фрагмента интерфейса.
Рассмотрим подробнее устройство некоторого модуля. Структура каждого модуля соблюдает шаблон программирования MVVM. MVVM (Model-View-ViewModel) является одним из наиболее популярных шаблонов проектирования приложений для платформы Android. Он разделяет приложение на три основных компонента: модель (Model), представление (View) и модель представления (ViewModel).
Модель (Model) представляет данные и бизнес логику приложения. Она может быть реализована как отдельный компонент или набор компонентов, которые обрабатывают данные. В данном варианте моделью являются данные получаемые из экземпляра Repository (его работа описана в пункте 6.2).
Представление (View) отображает данные модели и обрабатывает пользовательский ввод. Она может быть представлена как отдельный экран или компонент интерфейса пользователя. Каждая View реализует ранее описанный BaseFragment.
Модель представления (ViewModel) отвечает за связь между моделью и представлением. Она обрабатывает пользовательский ввод и обновляет модель, которая, в свою очередь, уведомляет представление об изменениях. ViewModel также может содержать дополнительную логику, необходимую для обработки данных перед их отображением. Данные в ViewModel в виде специального класса положений, он представляет собой наблюдаемый поток, содержащий данные о представлении. Представление подписывается на обновления этого положения и корректирует отображение интерфейса в соответствии с получаемыми данными. Для более удобного использования этого подхода нами был написан специальный класс State, он позволяет более удобно распознавать разные положения, например: загрузка, успешное получение, вызов диалога, сообщение об ошибке.
6.4 Верстка графического интерфейса
Дизайн. В реализации графического интерфейса мы применили рекомендованные Google подходы по реализации дизайна. Основой дизайна стал Material 3, это новый дизайн-язык от Google, который был анонсирован в 2021 году и является следующей эволюцией Material Design. Он ориентирован на более динамические и интерактивные пользовательские интерфейсы, которые могут лучше адаптироваться к различным устройствам и сценариям использования. Основные рекомендованные положения по дизайну Material 3 включают в себя:
1.	Использование форм и теней для создания глубины и иерархии в интерфейсе.
2.	Использование анимаций и переходов для улучшения опыта пользователя и подчеркивания контекста.
3.	Использование цвета для создания настроения и выделения важной информации.
4.	Использование типографики для улучшения читабельности и ясности контента.
5.	Разработка интерфейса для различных устройств и платформ, чтобы обеспечить единообразный опыт пользователя.
Material 3 также предоставляет более гибкие инструменты для настройки дизайна, чтобы дизайнеры могли создавать уникальные и креативные интерфейсы, которые соответствуют их бренду и потребностям пользователей. Google предоставляет удобную библиотеку графических элементов, которые мы активно использовали в приложении.
Иконки. Все изображения и иконки добавлялись в проект с помощью Vector Asset  инструмент. Иконки адаптированы под отображение на устройствах с разной плотностью пикселей. Для иконок навигационной панели созданы специальные двойные отображения в заполненном и контурном стиле. Главным и единственным источников иконок является бесплатный сервис Google Fonts, а именно его раздел с иконками Material Symbols. Главная иконка приложения создана в Figma и переведена в XML asset (Рисунок 7).
Тема приложения. Цвета и тема приложения созданы в Material Theme Builder. Данный сервис позволяет генерировать цветовые палитры, которые легко импортируются в Android приложения.
Верстка интерфейса. Верстка интерфейса производилась на языке XML. В проекте задействованы элементы библиотеки material и стандартной androidx.
Навигация приложения. Для навигации в приложении мы решили использовать современное и рекомендуемое сообществом разработчиков решение. Jetpack Navigation - это библиотека Android Jetpack, которая облегчает навигацию в приложении и управление переходами между фрагментами или экранами. Эта библиотека предоставляет набор инструментов для создания и управления навигационным графом приложения, а также API для выполнения переходов между экранами и передачи параметров между ними.
Jetpack Navigation помогло решить нам множество проблем, связанных с навигацией в приложении, таких как управление стеком фрагментов, передача данных между фрагментами, обработка переходов назад и многое другое. Благодаря этой библиотеке мы смогли сосредоточиться на создании пользовательского интерфейса и бизнес-логики, не тратя много времени на управление навигацией.
6.5 Dependency Injection (внедрение зависимостей)
Внедрение зависимостей (Dependency Injection, DI) - это практика программирования, которая позволяет управлять зависимостями в приложении и упрощает написание тестируемого и поддерживаемого кода. Суть DI заключается в том, что зависимости передаются в объект, а не создаются им самим.
В нашем проекте DI полезен для упрощения тестирования и снижения связности между компонентами приложения. Вместо самостоятельного создания зависимостей объектом мы централизованно управляем ими в приложении с помощью отдельного модуля. Данный модуль реализован в корневом пакете di нашего приложения. Наш пакет включает в себя следующие классы:
1.	DataModule: для контроля передачи экземпляра класса Repository DATA слоя.
2.	InternalStorageModule: для обеспечения единственной реализации InternalStorageManager (см. пункт 6.2).
3.	NetworkModule: для обеспечения единственной реализации клиентов библиотек OkHttp и Retrofit.
Для реализации DI в Android приложениях есть несколько самых популярных библиотек. Наш выбор пал на Hilt — это библиотека внедрения зависимостей от Google, которая предоставляет простой и удобный способ управления зависимостями в Android-приложениях. Ключевыми причинами нашего выбора стали следующие преимущества Hilt:
1.	Улучшенная читаемость кода: Hilt позволяет явно указывать, какие зависимости используются в классе, что делает код более понятным и читабельным.
2.	Легко настраиваемая конфигурация: Hilt предлагает простой и гибкий способ настройки внедрения зависимостей, что позволяет настроить его для конкретных потребностей проекта.
3.	Поддержка Android Jetpack: Hilt был разработан для интеграции с другими компонентами Android Jetpack, такими как ViewModel и Lifecycle, что упрощает создание приложений на основе этих компонентов.
6.6 Работа с фоновыми процессами
Для отправки актов приложение должно запускать фоновый процесс, чтобы обезопасить основной поток приложения от возникновения ошибок. Также для реализации отправки только при наличии Интернета необходимо, чтобы служба сохранялась и запускалась в нужный момент. Для создания подобной системы существует несколько инструментов, мы решили выбрать WorkManager. WorkManager - это библиотека Android для управления фоновыми задачами в приложении. Он позволяет запускать асинхронные задачи, такие как загрузка, синхронизация данных или отправка аналитических событий, даже когда приложение закрыто или устройство перезагружено. WorkManager решает множество проблем, связанных с выполнением задач в фоновом режиме, таких как сохранение состояния задач при перезапуске приложения, планирование и управление задачами, управление энергопотреблением и слежением за статусом подключения к сети.
WorkManager был представлен на конференции Google I/O в 2018 году и быстро стал одной из рекомендованных библиотек для выполнения задач в фоновом режиме. Он заменил более ранние инструменты, такие как JobScheduler и Firebase JobDispatcher, и предоставил удобный интерфейс для работы с фоновыми задачами в приложении. Он идеально подходит для выполнения нашей задачи.
Реализация этого менеджера описана в пакете background.worker. Мы разработали небольшой алгоритм, который собирает все накопившиеся в локальной памяти устройства акты и отправляет на сервер, сообщая о своих действиях через уведомления на смартфоне, в них отображается статус операции и шкала загрузки.
7. Подготовка приложения и сборка Android проекта
Процесс сборки и компиляции Android приложения состоит из нескольких шагов:
1.	Компиляция исходного кода: исходный код на языке Kotlin компилируется в байт-код, который будет исполняться на устройстве.
2.	Создание R.java: система создает файл R.java, который содержит ссылки на все ресурсы приложения, такие как макеты, изображения, строки и т.д.
3.	Сборка ресурсов: все ресурсы, необходимые для приложения, собираются в один файл, который будет включен в итоговый apk-файл.
4.	Сборка dex-файлов: все байт-коды приложения объединяются в один или несколько dex-файлов, которые будут загружены на устройство.
5.	Создание apk-файла: все ресурсы и dex-файлы упаковываются в apk-файл, который может быть установлен на устройстве.
6.	Подписание приложения: apk-файл должен быть подписан сертификатом, чтобы убедиться, что он был создан именно разработчиком приложения.
Gradle - это система автоматической сборки проектов, которая используется в Android Studio для компиляции, сборки и управления зависимостями проекта. С помощью этого инструмента мы производили сборки нашего продукта. При разработке нашего проекта мы настроили Gradle для подписи наших пакетов и версионирования нашего приложения. Мы также настроили зависимости нашего проекта, чтобы добавить необходимые библиотеки и плагины. После этого мы запустили сборку проекта, чтобы убедиться, что все настройки правильно работают и приложение успешно собирается. В данных условиях распространение продукта путем передачи APK-файла является наиболее удобным способом.
ЗАКЛЮЧЕНИЕ
По результатам проект было разработано мобильное Android приложение для составления актов приемки и экспертизы жилых помещений. Все поставленные требования для работы приложения были учтены: заполнение актов можно производить безе подключения к Интернету; возможно прикреплять фотографии из галереи и делать их в приложении; есть функционал обновления структуры отчета. Также для работы приложения разработан сервер с функциями генерации PDF отчетов и отправки на почту.
Продукт полностью функционирует, принят заказчиком и активно используется, он позволил значительно сократить расходы на дополнительных сотрудников и получить преимущество перед конкурентами. На данный момент через систему было заполнено и отправлено клиентам уже более 1500 реальных отчетов.
Проект полностью реализован и стабильно работает. После первых тестов был добавлен дублирующий сервер для предотвращения возможных проблем с хостинг провайдером, в приложении также реализован функционал выбора нужного сервера. Благодаря гибкой и надежной системе логирования и сбора статистики все проблемы быстро отслеживаются и исправляются. В ближайших планах находится разработка решения для генерации актов непосредственно на устройстве сотрудника и система автоматического обновления приложения. На базе данного проекта можно реализовать неограниченное количество похожих по функционалу сервисов, например, в будущем будет реализовано похожее приложение для экспертов в оценке поддержанных автомобилей. 
В ходе работы мы получили большой опыт мобильной разработки. Работа включала в себя не только программирование, но и обширную теоретическую часть с разработкой концепции и архитектуры конечного продукта. 
СПИСОК ИСПОЛЬЗОВАННЫХ ИСТОЧНИКОВ
1.	Федеральная служба государственной статистики (Росстат). - Текст : электронный // TADVISER : [сайт]. - 2023. - URL: https://www.tadviser.ru/index.php/Компания:Федеральная_служба_государственной_статистики_(Росстат) (дата обращения: 04.05.2023)
2.	Рынок недвижимости России вошел в необычное для себя состояние. - Текст : электронный // РБК Недвижимость : [сайт]. - 2023. - URL: https://realty.rbc.ru/news/5cd1069a9a7947b28feaebfd (дата обращения: 04.05.2023)
3.	Минстрой планирует сделать постоянными антикризисные правила приема новостроек. - Текст : электронный // ТАСС : [сайт]. - 2023. - URL: https://tass.ru/nedvizhimost/15367361 (дата обращения: 04.05.2023)
4.	The Clean Architecture — Beginner’s Guide. - Текст : электронный // Medium : [сайт]. - 2023. - URL: https://betterprogramming.pub/the-clean-architecture-beginners-guide-e4b7058c1165 (дата обращения: 04.05.2023)
5.	Guide to app architecture. - Текст : электронный // Android Developers : [сайт]. - 2023. - URL: https://developer.android.com/topic/architecture (дата обращения: 04.05.2023)
6.	Some Best Practices for Android App Architecture.  - Текст : электронный // Medium : [сайт]. - 2023. - URL: https://medium.com/kayvan-kaseb/some-best-practices-for-android-app-architecture-8abb925ca78d (дата обращения: 04.05.2023)
7.	Android Studio.  - Текст : электронный // Android Developers : [сайт]. - 2023. - URL: https://developer.android.com/studio (дата обращения: 04.05.2023)
8.	DataStore. - Текст : электронный // Android Developers : [сайт]. - 2023. - URL: https://developer.android.com/jetpack/androidx/releases/datastore (дата обращения: 04.05.2023)
9.	Dependency injection with Hilt. - Текст : электронный // Android Developers : [сайт]. - 2023. - URL: https://developer.android.com/training/dependency-injection/hilt-android (дата обращения: 04.05.2023)
ПРИЛОЖЕНИЕ А




Картинка 1: Регистрация пользователя	Картинка 2: Авторизация пользователя	Картинка 3: Главное окно пользователя
ПРИЛОЖЕНИЕ Б




Картинка 1: Главное окно редактора	Картинка 2: Диалог о потере данных	Картинка 3: Начальный раздел редактора
ПРИЛОЖЕНИЕ В




Картинка 1: Список помещения	Картинка 2: Список объектов	Картинка 3: Список замечаний
ПРИЛОЖЕНИЕ Г




Картинка 1: Диалог добавления фото	Картинка 2: Диалог прикрепления фото 2	Картинка 3: Завершение редактирования
ПРИЛОЖЕНИЕ Д




Картинка 1: Диалог показа стандарта	Картинка 2: Окно созданных актов	Картинка 3: Информация об акте
ПРИЛОЖЕНИЕ Е


Картинка 1: Главное меню панели администратора


Картинка 2: Редактор структуры отчета в панели администратора

